export const defaultPrompt = "You are an expert in Natural Language Processing. You will be given a Markdown document containing academic notes of a particular topic. The document may contain bullet points that are not in proper English Grammar.\n\nYour task is to extract relevant concept-relation-concept triples from the provided document. Follow these steps:\n\nStep 1 - From the given document, form complete and simple English sentences. Be as thorough as possible; do not summarize and do not leave out concepts and details. The sentences must also be simple such that the subject and objects of the verb are clearly indicated. Consider the parent and child bullet points in completing incomplete phrases. Note the concepts that reoccur throughout the bullet points since these are important.\n\nStep 2 - Using the generated complete English sentences, extract concept-relation-concept triples or subject-verb-object triples. Again, note the concepts that reoccur throughout the sentences. Be sure to extract all possible triples; do not leave out details. Each concept must be atomic - in other words, a single idea or noun phrase. The relation can be a verb phrase, or anything that describes the relationship between the concepts. The concepts in the bullet points are all related, thus find a way to connect all these concepts with each other.\n\nStep 3 - Review the generated triples and infer relations between concepts that have no relations yet. Make sure that the relations you inferred are logical, consistent, and true. Do not make up your own facts. Instead, consult your knowledge base. Think it carefully, do not rush. Include these inferred relationships in the triples. Keep in mind that \n\nStep 4 - Again, review the generated triples and resolve concepts that are semantically similar. This means that if 2 concepts are semnantically similar, they are just the same concept. \n\nThe triples will be used in creating a concept map so make it as simple as possible but still retain the idea. Also make sure that the triples come from the given bullet points and comprehensible. Don't make up facts or relations that are not in the given bullet points. Instead, think step-by-step by analyzing the given bullet points. \n\nBe sure to process the entirety of the given document - in other words extract all possible triples until the end of the document before generating the triples.\n\nReturn a JSON object containg the triples with the keys: concept1, relation, concept2."

export const defaultExamples = [
    {
        "prompt": "# Chapter 1- Introduction\n## Topics covered\n- Professional software development\n\t- What is meant by software engineering.\n- Software engineering ethics\n\t- A brief introduction to ethical issues that affect software engineering.\n- Case studies\n\t- An introduction to three examples that are used in later chapters in the book.\n## Software engineering\n- The economies of ALL developed nations are dependent on software.\n- More and more systems are software controlled\n- Software engineering is concerned with theories, methods and tools for professional software  development.\n- Expenditure on software represents a significant fraction of GNP in all developed countries.\n## Software costs\n- Software costs often dominate computer system costs.\n- The costs of software on a PC are often greater than the  hardware cost.\n- Software costs more to maintain than it does to develop.  For systems with a long life, maintenance costs may be  several times development costs.\n- Software engineering is concerned with cost-effective software development.\n## Software products\n- Generic products\n\t- Stand-alone systems that are marketed and sold to any customer who wishes to buy them.\n\t- Examples – PC software such as graphics programs, project management tools; CAD software; software for specific markets  such as appointments systems for dentists.\n- Customized products\n\t- Software that is commissioned by a specific customer to meet their own needs.\n\t- Examples – embedded control systems, air traffic control software, traffic monitoring systems.\n## Product specification\n- Generic products\n\t- The specification of what the software should do is owned by the  software developer and decisions on software change are made  by the developer.\n- Customized products\n\t- The specification of what the software should do is owned by the  customer for the software and they make decisions on software  changes that are required.\n## Frequently asked questions about software  engineering\n- What is software?\n\t- Computer  programs  and  associated  documentation.  Software  products  may  be  developed  for  a  particular  customer or may be developed for a general market.\n- What are the attributes of good software? \n\t- Good software should deliver the required functionality and performance to the user and should be maintainable, dependable and usable.\n- What is software engineering?\n\t- Software engineering is an engineering discipline that is  concerned with all aspects of software production.\n- What are the fundamental software engineering activities?\n\t- Software specification, software development, software validation and software evolution.\n- What is the difference between software engineering and computer science?\n\t- Computer science focuses on theory and fundamentals; software engineering is concerned with the practicalities of developing and delivering useful software.\n- What is the difference between software engineering and system engineering?\n\t- System engineering is concerned with all aspects of computer-based systems development including hardware, software and process engineering. Software engineering is part of this more general process\n- What are the key challenges facing software engineering?\n\t- Coping with increasing diversity, demands for reduced delivery times and developing trustworthy software.\n- What are the costs of software engineering?\n\t- Roughly 60% of software costs are development costs, 40% are testing costs. For custom software, evolution costs often exceed development costs.\n- What are the best software engineering techniques and methods?\n\t- While all software projects have to be professionally managed and developed, different techniques are appropriate for different types of system. For example, games should always be developed using a series of prototypes whereas safety critical control systems require a complete and analyzable specification to be developed. You can’t, therefore, say that one method is better than another.\n- What differences has the web made to software engineering?\n\t- The web has led to the availability of software services and the possibility of developing highly distributed service-based systems. Web-based systems development has led to important advances in programming languages and software reuse.\n## Essential attributes of good software\n- Maintainability\n\t- Software should be written in such a way so that it can evolve to  meet the  changing  needs  of customers.  This  is a critical  attribute  because  software  change  is  an  inevitable  requirement  of  a  changing business environment.\n- Dependability and  security\n\t- Software  dependability  range  of  characteristics  includes  a  including  reliability,  security  and  safety.  Dependable  software  should  not  cause  physical  or  economic  damage  in  the  event  of  system  failure.  Malicious  users  should  not  be    able  to  access  or  damage the system.\n- Efficiency\n\t- Software should not make wasteful use of system resources such  as  memory  and  processor  cycles.  Efficiency  therefore  includes  responsiveness, processing time, memory utilisation, etc.\n- Acceptability\n\t- Software  must  be  acceptable  to  the  type  of  users  for  which  it  is  designed. This means that it must be understandable, usable and  compatible with other systems that they use.\n## Software engineering\n- Software engineering is an engineering discipline that is  concerned with all aspects of software production from  the early stages of system specification through to  maintaining the system after it has gone into use.\n- Engineering discipline\n\t- Using appropriate theories and methods to solve problems  bearing in mind organizational and financial constraints.\n- All aspects of software production\n\t- Not just technical process of development. Also project management and the development of tools, methods etc. to  support software production.\n## Importance of software engineering\n- More and more, individuals and society rely on advanced software systems. We need to be able to produce  reliable and trustworthy systems economically and  quickly.\n- It is usually cheaper, in the long run, to use software  engineering methods and techniques for software  systems rather than just write the programs as if it was a  personal programming project. For most types of  system, the majority of costs are the costs of changing  the software after it has gone into use.\n## Software process activities\n- Software specification, where customers and engineers define the software that is to be produced and the  constraints on its operation.\n- Software development, where the software is designed and programmed.\n- Software validation, where the software is checked to ensure that it is what the customer requires.\n- Software evolution, where the software is modified to  reflect changing customer and market requirements.\n## General issues that affect most software\n- Heterogeneity\n\t- Increasingly, systems are required to operate as distributed systems across networks that include different types of computer  and mobile devices.\n- Business and social change\n\t- Business and society are changing incredibly quickly as emerging economies develop and new technologies become  available. They need to be able to change their existing software  and to rapidly develop new software.\n- Security and trust\n\t- As software is intertwined with all aspects of our lives, it is essential that we can trust that software.\n## Software engineering diversity\n- There are many different types of software system and  there is no universal set of software techniques that is  applicable to all of these.\n- The software engineering methods and tools used depend on the type of application being developed, the  requirements of the customer and the background of the  development team.\n## Application types\n- Stand-alone applications\n\t- These are application systems that run on a local computer, such as a PC. They include all necessary functionality and do  not need to be connected to a network.\n- Interactive transaction-based applications\n\t- Applications that execute on a remote computer and are accessed by users from their own PCs or terminals. These  include web applications such as e-commerce applications.\n- Embedded control systems\n\t- These are software control systems that control and manage  hardware devices. Numerically, there are probably more  embedded systems than any other type of system.\n- Batch processing systems\n\t- These are business systems that are designed to process data  in large batches. They process large numbers of individual  inputs to create corresponding outputs.\n- Entertainment systems\n\t- These are systems that are primarily for personal use and which are intended to entertain the user.\n- Systems for modeling and simulation\n\t- These are systems that are developed by scientists and engineers to model physical processes or situations, which  include many, separate, interacting objects.\n- Data collection systems\n\t- These are systems that collect data from their environment using a set of sensors and send that data to other systems for  processing.\n- Systems of systems\n\t- These are systems that are composed of a number of other software systems.\n## Software engineering fundamentals\n- Some fundamental principles apply to all types of  software system, irrespective of the development  techniques used:\n\t- Systems should be developed using a managed and understood  development process. Of course, different processes are used  for different types of software.\n\t- Dependability and performance are important for all types of system.\n\t- Understanding and managing the software specification and  requirements (what the software should do) are important.\n\t- Where appropriate, you should reuse software that has already been developed rather than write new software.\n## Software engineering and the web\n- The Web is now a platform for running application and  organizations are increasingly developing web-based  systems rather than local systems.\n- Web services (discussed in Chapter 19) allow application functionality to be accessed over the web.\n- Cloud computing is an approach to the provision of computer services where applications run remotely on  the ‘cloud’.\n\t- Users do not buy software buy pay according to use.\n## Web software engineering\n- Software reuse is the dominant approach for constructing web-based systems.\n\t- When building these systems, you think about how you can assemble them from pre-existing software components and systems.\n- Web-based systems should be developed and delivered incrementally.\n\t- It is now generally recognized that it is impractical to specify all the requirements for such systems in advance.\n- User interfaces are constrained by the capabilities of web browsers.\n\t- Technologies such as AJAX allow rich interfaces to be created within a web browser but are still difficult to use. Web forms with local  scripting are more commonly used.\n## Web-based software engineering\n- Web-based systems are complex distributed systems  but the fundamental principles of software engineering  discussed previously are as applicable to them as they  are to any other types of system.\n- The fundamental ideas of software engineering, discussed in the previous section, apply to web-based  software in the same way that they apply to other types  of software system.\n## Key points\n- Software engineering is an engineering discipline that is concerned with all aspects of software production.\n- Essential software product attributes are maintainability,  dependability and security, efficiency and acceptability.\n- The high-level activities of specification, development, validation and evolution are part of all software  processes.\n- The fundamental notions of software engineering are universally applicable to all types of system  development.\n- There are many different types of system and each  requires appropriate software engineering tools and  techniques for their development.\n- The fundamental ideas of software engineering are applicable to all types of software system.\n## Software engineering ethics\n- Software engineering involves wider responsibilities than simply the application of technical skills.\n- Software engineers must behave in an honest and ethically responsible way if they are to be respected as  professionals.\n- Ethical behaviour is more than simply upholding the law  but involves following a set of principles that are morally  correct.\n## Issues of professional responsibility\n- Confidentiality\n\t- Engineers should normally respect the confidentiality of their  employers or clients irrespective of whether or not a formal  confidentiality agreement has been signed.\n- Competence\n\t- Engineers should not misrepresent their level of competence.  They should not knowingly accept work which is outwith their  competence.\n- Intellectual property rights\n\t- Engineers should be aware of local laws governing the use of intellectual property such as patents, copyright, etc. They should  be careful to ensure that the intellectual property of employers  and clients is protected.\n- Computer misuse\n\t- Software engineers should not use their technical skills to misuse other people’s computers. Computer misuse ranges from  relatively trivial (game playing on an employer’s machine, say) to  extremely serious (dissemination of viruses).\n## ACM/IEEE Code of Ethics\n- The professional societies in the US have cooperated to produce a code of ethical practice.\n- Members of these organisations sign up to the code of practice when they join.\n- The Code contains eight Principles related to the  behaviour of and decisions made by professional  software engineers, including practitioners, educators,  managers, supervisors and policy makers, as well as  trainees and students of the profession.\n## Rationale for the code of ethics\n- Computers have a central and growing role in commerce, industry, government, medicine, education, entertainment and  society at large. Software engineers are those who contribute by  direct participation or by teaching, to the analysis, specification,  design, development, certification, maintenance and testing of  software systems.\n- Because of their roles in developing software systems, software  engineers have significant opportunities to do good or cause  harm, to enable others to do good or cause harm, or to influence  others to do good or cause harm. To ensure, as much as  possible, that their efforts will be used for good, software  engineers must commit themselves to making software  engineering a beneficial and respected profession.\n## The ACM/IEEE Code of Ethics\n- **Software Engineering Code of Ethics and Professional Practice**\n- ACM/IEEE-CS Joint Task Force on Software Engineering Ethics and Professional Practices\n- **PREAMBLE** \n- The short version of the code summarizes aspirations at a high level of the abstraction; the  clauses that are included in the full version give examples and details of how these  aspirations change the way we act as software engineering professionals. Without the  aspirations, the details can become legalistic and tedious; without the details, the  aspirations can become high sounding but empty; together, the aspirations and the details  form a cohesive code.\n- Software engineers shall commit themselves to making the analysis, specification, design,  development, testing and maintenance of software a beneficial and respected profession. In  accordance with their commitment to the health, safety and welfare of the public, software  engineers shall adhere to the following Eight Principles:\n## Ethical principles\n1. PUBLIC - Software engineers shall act consistently with the public interest.\n2. CLIENT AND EMPLOYER - Software engineers shall act in a manner that is in the best  interests of their client and employer consistent with the public interest.\n3. PRODUCT - Software engineers shall ensure that their products and related  modifications meet the highest professional standards possible.\n4. JUDGMENT - Software engineers shall maintain integrity and independence in their  professional judgment.\n5. MANAGEMENT - Software engineering managers and leaders shall subscribe to and  promote an ethical approach to the management of software development and  maintenance.\n6. PROFESSION - Software engineers shall advance the integrity and reputation of the  profession consistent with the public interest.\n7. COLLEAGUES - Software engineers shall be fair to and supportive of their colleagues.\n8. SELF - Software engineers shall participate in lifelong learning regarding the practice of  their profession and shall promote an ethical approach to the practice of the profession.\n## Ethical dilemmas\n- Disagreement in principle with the policies of senior management.\n- Your employer acts in an unethical way and releases a  safety-critical system without finishing the testing of the  system.\n- Participation in the development of military weapons systems or nuclear systems.\n## Case studies\n- A personal insulin pump\n\t-  An embedded system in an insulin pump used by diabetics to maintain blood glucose control.\n- A mental health case patient management system\n\t-  A system used to maintain records of people receiving care for mental health problems.\n- A wilderness weather station\n\t-  A data collection system that collects data about weather conditions in remote areas.\n### Insulin pump control system\n- Collects data from a blood sugar sensor and calculates the amount of insulin required to be injected.\n- Calculation based on the rate of change of blood sugar levels.\n- Sends signals to a micro-pump to deliver the correct dose of insulin.\n- Safety-critical system as low blood sugars can lead to brain malfunctioning, coma and death; high-blood sugar  levels have long-term consequences such as eye and  kidney damage.\n#### Essential high-level requirements\n- The system shall be available to deliver insulin when required.\n- The system shall perform reliably and deliver the correct  amount of insulin to counteract the current level of blood  sugar.\n- The system must therefore be designed and implemented to ensure that the system always meets  these requirements.\n### A patient information system for mental health  care\n- A patient information system to support mental health  care is a medical information system that maintains  information about patients suffering from mental health  problems and the treatments that they have received.\n- Most mental health patients do not require dedicated  hospital treatment but need to attend specialist clinics  regularly where they can meet a doctor who has detailed  knowledge of their problems.\n- To make it easier for patients to attend, these clinics are  not just run in hospitals. They may also be held in local  medical practices or community centres.\n#### MHC-PMS\n- The MHC-PMS (Mental Health Care-Patient Management System) is an information system that is  intended for use in clinics.\n- It makes use of a centralized database of patient information but has also been designed to run on a PC,  so that it may be accessed and used from sites that do  not have secure network connectivity.\n- When the local systems have secure network access, they use patient information in the database but they can  download and use local copies of patient records when  they are disconnected.\n#### MHC-PMS goals\n- To generate management information that allows health  service managers to assess performance against local  and government targets.\n- To provide medical staff with timely information to support the treatment of patients.\n#### MHC-PMS key features\n- Individual care management\n\t- Clinicians can create records for patients, edit the information in  the system, view patient history, etc. The system supports data  summaries so that doctors can quickly learn about the key  problems and treatments that have been prescribed.\n- Patient monitoring\n\t- The system monitors the records of patients that are involved in treatment and issues warnings if possible problems are detected.\n- Administrative reporting\n\t- The system generates monthly management reports showing the  number of patients treated at each clinic, the number of patients  who have entered and left the care system, number of patients  sectioned, the drugs prescribed and their costs, etc.\n#### MHC-PMS concerns\n- Privacy\n\t- It is essential that patient information is confidential and is never  disclosed to anyone apart from authorised medical staff and the  patient themselves.\n- Safety\n\t- Some mental illnesses cause patients to become suicidal or a  danger to other people. Wherever possible, the system should  warn medical staff about potentially suicidal or dangerous  patients.\n\t- The system must be available when needed otherwise safety may be compromised and it may be impossible to prescribe the  correct medication to patients.\n### Wilderness weather station\n- The government of a country with large areas of wilderness decides to deploy several hundred weather  stations in remote areas.\n- Weather stations collect data from a set of instruments  that measure temperature and pressure, sunshine,  rainfall, wind speed and wind direction.\n\t- The weather station includes a number of instruments that  measure weather parameters such as the wind speed and  direction, the ground and air temperatures, the barometric  pressure and the rainfall over a 24-hour period. Each of these  instruments is controlled by a software system that takes  parameter readings periodically and manages the data collected  from the instruments.\n#### Weather information system\n- The weather station system\n\t- This is responsible for collecting weather data, carrying out some  initial data processing and transmitting it to the data management  system.\n- The data management and archiving system\n\t- This system collects the data from all of the wilderness weather stations, carries out data processing and analysis and archives the  data.\n- The station maintenance system\n\t- This system can communicate by satellite with all wilderness weather stations to monitor the health of these systems and provide  reports of problems.\n#### Additional software functionality\n- Monitor the instruments, power and communication hardware and report faults to the management system.\n- Manage the system power, ensuring that batteries are  charged whenever the environmental conditions permit  but also that generators are shut down in potentially  damaging weather conditions, such as high wind.\n- Support dynamic reconfiguration where parts of the  software are replaced with new versions and where  backup instruments are switched into the system in the  event of system failure.\n### Key points\n- Software engineers have responsibilities to the engineering profession and society. They should not  simply be concerned with technical issues.\n- Professional societies publish codes of conduct which  set out the standards of behaviour expected of their  members.\n- Three case studies are used in the book:\n\t- An embedded insulin pump control system  \n\t- A system for mental health care patient management  \n\t- A wilderness weather station",
        "completion": "Software engineering; is concerned with; Professional software development\nSoftware costs; dominate; Computer system cost\nSoftware engineering; is concerned with; Cost-effective software development\nSoftware costs; are often greater than; Hardware costs\nSoftware products; can be; Generic products\nGeneric products; are; Stand-alone systems that are marketed and sold to any customer who wishes to buy them\nGeneric products; includes; PC software such as graphics programs, project management tools, CAD software, software for specific markets  such as appointments systems for dentists.\nSoftware products; can be; Customized products\nCustomized products; have; customer-owned specifications\nCustomer; make decisions on; Customized products\nSoftware; includes; Computer  programs  and  associated  documentation\nSoftware; should; Deliver the required functionality and performance to the user\nSoftware; should be; Maintainable, dependable and usable.\nSoftware engineering; is an; Engineering discipline \nSoftware engineering; is concerned with; Software production.\nSystem engineering; is concerned with; All aspects of computer-based systems development\nSoftware engineering; is part of; System engineering\nSoftware engineering; faces; Coping with increasing diversity, demands for reduced delivery times and developing trustworthy software\nSoftware costs; include; Development costs, testing costs, and evolution costs\nSoftware products; have to be; Professionally managed and developed\nSoftware; has; Maintainability\nMaintainability; includes; Possibility to evolve to meet the changing needs of customers\nSoftware; has; Dependability and security\nDependability and security; includes; reliability, security, and safety\nSoftware; has; Efficiency\nEfficiency; includes; Responsiveness, processing time, memory utilisation, etc.\nSoftware; has; Acceptability\nAcceptability; is; Acceptable  to  the  type  of  users  for  which  it  is  designed\nSoftware production; includes; Technical process of development, project management, and the development of tools, methods etc.\nSoftware engineering; reduces; Software costs\nSoftware engineering; includes; Software specification, software development, software validation and software evolution\nSoftware; suffers from; Heterogeneity, Business and social change, and Security and trust\nSoftware engineering; depends on; Application types\nSoftware engineering; depends on; The requirements of the customer and the background of the  development team\nApplication types; include; Stand-alone applications\nStand-alone applications; run on; Local computer\nStand-alone applications; includes; All necessary functionality \nStand-alone applications; do not need; Internet connection\nApplication types; include; Interactive transaction-based applications\nInteractive transaction-based applications; executed on; Remote computer\nInteractive transaction-based applications; accessed using; PCs and terminals\nApplication types; include; Embedded control systems\nEmbedded control systems; control and manage; Hardware devices\nApplication types; include; Batch processing systems\nBatch processing systems; process; Large batches of data\nApplication types; include; Entertainment systems\nEntertainment systems; are used for; Entertaining the user\nApplication types; include; Systems for modeling and simulation\nSystems for modeling and simulation; developed by; Scientists and engineers\nSystems for modeling and simulation; model; Physical processes or situations\nApplication types; include; Data collection systems\nData collection systems; collect; Data\nData; sent to; Other systems\nData collection systems; use; Sensors\nApplication types; include; Systems of systems\nSystems of systems; composed of; Other systems\nWeb; run; Web-based systems\nWeb; includes; Web services\nWeb services allow; Access to application functionality\nWeb; includes; Cloud computing\nCloud computing; run; Applications remotely\nWeb-based systems; uses; Software reuse\nSoftware reuse; assembles; pre-existing software components and systems\nWeb-based systems; should be; Developed and delivered incrementally\nWeb-based systems; should be; User interface\nUser interface; constrained by; web browser\nWeb-based systems; are; Distributed systems\nWeb-based systems; apply; Software engineering\nSoftware engineering; considers; Ethics\nEthics; involves; Upholding the law and following a set of principles that are morally correct\nProfessional responsibility; has issues; Confidentiality\nProfessional responsibility; has issues; Competence\nProfessional responsibility; has issues; Intellectual property rights\nProfessional responsibility; has issues; Computer misuse\nEthics;;ACM/IEEE Code of Ethics\nSoftware engineers; must follow; ACM/IEEE Code of Ethics\nSoftware engineering managers and leaders; must follow; ACM/IEEE Code of Ethics\nSoftware engineers; must act with; Public interest\nSoftware engineers; must act with; best interest of their client and employer\nSoftware engineers; must meet; Highest professional standards\nSoftware engineers; must maintain; Integrity and independence in their  professional judgment\nSoftware engineering managers and leaders;  must promote; Ethical approach\nSoftware engineers; must advance; The integrity and reputation of the  profession\nSoftware engineers; must be; Fair to and supportive of their colleagues\nSoftware engineers; must participate in; Lifelong learning"
    }
]